From b3fcace37e1e06fce9ff408d5e704fd789118708 Mon Sep 17 00:00:00 2001
From: Haihao Xiang <haihao.xiang@intel.com>
Date: Fri, 10 Mar 2023 13:07:09 +0800
Subject: [PATCH 103/115] lavu/hwcontext_qsv: update AVQSVFramesContext to
 support dynamic frame pools

When AVQSVFramesContext.nb_surfaces is set to 0, a dynamic frame pool is
expected, otherwise a fixed frame pool is expected.

In addition, AVQSVFramesContext.info is added. User should provide
AVQSVFramesContext.info instead of AVQSVFramesContext.surfaces for
dynamic frame pools.

Signed-off-by: Haihao Xiang <haihao.xiang@intel.com>
---
 doc/APIchanges            |  3 +++
 libavutil/hwcontext_qsv.c |  4 ++--
 libavutil/hwcontext_qsv.h | 22 +++++++++++++++++++++-
 libavutil/version.h       |  2 +-
 4 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/doc/APIchanges b/doc/APIchanges
index be2c8c65e1..8048bacd17 100644
--- a/doc/APIchanges
+++ b/doc/APIchanges
@@ -2,6 +2,9 @@ The last version increases of all libraries were on 2023-02-09
 
 API changes, most recent first:
 
+2023-09-xx - xxxxxxxxxx - lavu 58.25.100 - hwcontext_qsv.h
+  Add AVQSVFramesContext.info to support dynamic frame pools
+
 2023-09-07 - xxxxxxxxxx - lavu 58.24.100 - imgutils.h
   Add av_image_copy2(), a wrapper around the av_image_copy()
   to overcome limitations of automatic conversions.
diff --git a/libavutil/hwcontext_qsv.c b/libavutil/hwcontext_qsv.c
index 0f1ac50913..6d045405c4 100644
--- a/libavutil/hwcontext_qsv.c
+++ b/libavutil/hwcontext_qsv.c
@@ -613,7 +613,7 @@ static mfxStatus frame_alloc(mfxHDL pthis, mfxFrameAllocRequest *req,
     QSVFramesContext       *s = ctx->internal->priv;
     AVQSVFramesContext *hwctx = ctx->hwctx;
     mfxFrameInfo *i  = &req->Info;
-    mfxFrameInfo *i1 = &hwctx->surfaces[0].Info;
+    mfxFrameInfo *i1 = hwctx->nb_surfaces ? &hwctx->surfaces[0].Info : hwctx->info;
 
     if (!(req->Type & MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET) ||
         !(req->Type & (MFX_MEMTYPE_FROM_VPPIN | MFX_MEMTYPE_FROM_VPPOUT)) ||
@@ -1173,7 +1173,7 @@ static int qsv_init_internal_session(AVHWFramesContext *ctx,
                               MFX_IOPATTERN_OUT_SYSTEM_MEMORY;
     par.AsyncDepth = 1;
 
-    par.vpp.In = frames_hwctx->surfaces[0].Info;
+    par.vpp.In = frames_hwctx->nb_surfaces ? frames_hwctx->surfaces[0].Info : *frames_hwctx->info;
 
     /* Apparently VPP requires the frame rate to be set to some value, otherwise
      * init will fail (probably for the framerate conversion filter). Since we
diff --git a/libavutil/hwcontext_qsv.h b/libavutil/hwcontext_qsv.h
index e2dba8ad83..317ae5094f 100644
--- a/libavutil/hwcontext_qsv.h
+++ b/libavutil/hwcontext_qsv.h
@@ -51,7 +51,27 @@ typedef struct AVQSVDeviceContext {
  * This struct is allocated as AVHWFramesContext.hwctx
  */
 typedef struct AVQSVFramesContext {
-    mfxFrameSurface1 *surfaces;
+    /**
+     * A pointer to mfxFrameSurface1 or mfxFrameInfo structure.
+     *
+     * When nb_surfaces is 0, it is a pointer to mfxFrameInfo structure,
+     * otherwise it is a pointer to mfxFrameSurface1.
+     */
+    union {
+        mfxFrameSurface1 *surfaces;
+        mfxFrameInfo     *info;
+    };
+
+    /**
+     * Number of frames
+     *
+     * A dynamic frame pool is required when nb_surfaces is 0, otherwise
+     * a fixed frame pool is required.
+     *
+     * User should make sure the configuration can support dynamic frame
+     * allocation when dynamic frame pool is required. For example, you cannt
+     * set nb_surfaces to 0 when the child_device_type is AV_HWDEVICE_TYPE_DXVA2.
+     */
     int            nb_surfaces;
 
     /**
diff --git a/libavutil/version.h b/libavutil/version.h
index 132e5ffc84..00f229d233 100644
--- a/libavutil/version.h
+++ b/libavutil/version.h
@@ -79,7 +79,7 @@
  */
 
 #define LIBAVUTIL_VERSION_MAJOR  58
-#define LIBAVUTIL_VERSION_MINOR  24
+#define LIBAVUTIL_VERSION_MINOR  25
 #define LIBAVUTIL_VERSION_MICRO 100
 
 #define LIBAVUTIL_VERSION_INT   AV_VERSION_INT(LIBAVUTIL_VERSION_MAJOR, \
-- 
2.34.1

