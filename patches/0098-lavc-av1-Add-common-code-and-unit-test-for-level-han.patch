From e982e79ab64d679adcc505026811bf82ee659ddc Mon Sep 17 00:00:00 2001
From: Fei Wang <fei.w.wang@intel.com>
Date: Tue, 14 Mar 2023 10:21:24 +0800
Subject: [PATCH 36/40] lavc/av1: Add common code and unit test for level
 handling

Signed-off-by: Fei Wang <fei.w.wang@intel.com>
---
 libavcodec/Makefile            |   1 +
 libavcodec/av1_profile_level.c |  92 ++++++++++++++++++++++++
 libavcodec/av1_profile_level.h |  58 +++++++++++++++
 libavcodec/tests/.gitignore    |   1 +
 libavcodec/tests/av1_levels.c  | 125 +++++++++++++++++++++++++++++++++
 tests/fate/libavcodec.mak      |   5 ++
 6 files changed, 282 insertions(+)
 create mode 100644 libavcodec/av1_profile_level.c
 create mode 100644 libavcodec/av1_profile_level.h
 create mode 100644 libavcodec/tests/av1_levels.c

diff --git a/libavcodec/Makefile b/libavcodec/Makefile
index 735268f57a..02c84d5f33 100644
--- a/libavcodec/Makefile
+++ b/libavcodec/Makefile
@@ -1343,6 +1343,7 @@ TESTPROGS-$(CONFIG_H264_METADATA_BSF)     += h264_levels
 TESTPROGS-$(CONFIG_HEVC_METADATA_BSF)     += h265_levels
 TESTPROGS-$(CONFIG_RANGECODER)            += rangecoder
 TESTPROGS-$(CONFIG_SNOW_ENCODER)          += snowenc
+TESTPROGS-$(CONFIG_AV1_VAAPI_ENCODER)     += av1_levels
 
 TESTOBJS = dctref.o
 
diff --git a/libavcodec/av1_profile_level.c b/libavcodec/av1_profile_level.c
new file mode 100644
index 0000000000..f9c498f128
--- /dev/null
+++ b/libavcodec/av1_profile_level.c
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2023 Fei Wang
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "libavutil/common.h"
+#include "av1_profile_level.h"
+
+/** ignore entries which named in spec but no details. Like level 2.2 and 7.0. */
+static const AV1LevelDescriptor av1_levels[] = {
+    // Name                      MaxVSize                           MainMbps              MaxTiles
+    // |  level_idx                 | MaxDisplayRate                    | HighMbps         | MaxTileCols
+    // |      |   MaxPicSize        |       |     MaxDecodeRate         |    |   MainCR    |   |
+    // |      |     |    MaxHSize   |       |           | MaxHeaderRate |    |     | HighCR|   |
+    // |      |     |        |      |       |           |       |       |    |     |  |    |   |
+    { "2.0",  0,   147456,  2048, 1152,   4423680,     5529600, 150,   1.5,     0, 2, 0,   8,  4 },
+    { "2.1",  1,   278784,  2816, 1584,   8363520,    10454400, 150,   3.0,     0, 2, 0,   8,  4 },
+    { "3.0",  4,   665856,  4352, 2448,  19975680,    24969600, 150,   6.0,     0, 2, 0,  16,  6 },
+    { "3.1",  5,  1065024,  5504, 3096,  31950720,    39938400, 150,  10.0,     0, 2, 0,  16,  6 },
+    { "4.0",  8,  2359296,  6144, 3456,  70778880,    77856768, 300,  12.0,  30.0, 4, 4,  32,  8 },
+    { "4.1",  9,  2359296,  6144, 3456,  141557760,  155713536, 300,  20.0,  50.0, 4, 4,  32,  8 },
+    { "5.0", 12,  8912896,  8192, 4352,  267386880,  273715200, 300,  30.0, 100.0, 6, 4,  64,  8 },
+    { "5.1", 13,  8912896,  8192, 4352,  534773760,  547430400, 300,  40.0, 160.0, 8, 4,  64,  8 },
+    { "5.2", 14,  8912896,  8192, 4352, 1069547520, 1094860800, 300,  60.0, 240.0, 8, 4,  64,  8 },
+    { "5.3", 15,  8912896,  8192, 4352, 1069547520, 1176502272, 300,  60.0, 240.0, 8, 4,  64,  8 },
+    { "6.0", 16, 35651584, 16384, 8704, 1069547520, 1176502272, 300,  60.0, 240.0, 8, 4, 128, 16 },
+    { "6.1", 17, 35651584, 16384, 8704, 2139095040, 2189721600, 300, 100.0, 480.0, 8, 4, 128, 16 },
+    { "6.2", 18, 35651584, 16384, 8704, 4278190080, 4379443200, 300, 160.0, 800.0, 8, 4, 128, 16 },
+    { "6.3", 19, 35651584, 16384, 8704, 4278190080, 4706009088, 300, 160.0, 800.0, 8, 4, 128, 16 },
+};
+
+const AV1LevelDescriptor *ff_av1_guess_level(int64_t bitrate,
+                                             int tier,
+                                             int width,
+                                             int height,
+                                             int tiles,
+                                             int tile_cols,
+                                             float fps)
+{
+    int pic_size;
+    uint64_t display_rate;
+    float max_br;
+    int i;
+
+    pic_size = width * height;
+    display_rate = (uint64_t)pic_size * fps;
+
+    for (i = 0; i < FF_ARRAY_ELEMS(av1_levels); i++) {
+        const AV1LevelDescriptor *level = &av1_levels[i];
+        // Limitation: decode rate, header rate, compress rate, etc. are not considered.
+        if (pic_size > level->max_pic_size)
+            continue;
+        if (width > level->max_h_size)
+            continue;
+        if (height > level->max_v_size)
+            continue;
+        if (display_rate > level->max_display_rate)
+            continue;
+
+        if (tier)
+            max_br = level->high_mbps;
+        else
+            max_br = level->main_mbps;
+        if (!max_br)
+            continue;
+        if (bitrate > (int64_t)(1000000.0 * max_br))
+            continue;
+
+        if (tiles > level->max_tiles)
+            continue;
+        if (tile_cols > level->max_tile_cols)
+            continue;
+        return level;
+    }
+
+    return NULL;
+}
diff --git a/libavcodec/av1_profile_level.h b/libavcodec/av1_profile_level.h
new file mode 100644
index 0000000000..873f9a8918
--- /dev/null
+++ b/libavcodec/av1_profile_level.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2023 Fei Wang
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef AVCODEC_AV1_PROFILE_LEVEL_H
+#define AVCODEC_AV1_PROFILE_LEVEL_H
+
+#include <stdint.h>
+
+typedef struct AV1LevelDescriptor {
+    const char *name;
+    uint8_t     level_idx;
+
+    uint32_t    max_pic_size;
+    uint32_t    max_h_size;
+    uint32_t    max_v_size;
+    uint64_t    max_display_rate;
+    uint64_t    max_decode_rate;
+
+    uint32_t    max_header_rate;
+    float       main_mbps;
+    float       high_mbps;
+    uint32_t    main_cr;
+    uint32_t    high_cr;
+    uint32_t    max_tiles;
+    uint32_t    max_tile_cols;
+} AV1LevelDescriptor;
+
+/**
+ * Guess the level of a stream from some parameters.
+ *
+ * Unknown parameters may be zero, in which case they will be ignored.
+ */
+const AV1LevelDescriptor *ff_av1_guess_level(int64_t bitrate,
+                                             int tier,
+                                             int width,
+                                             int height,
+                                             int tile_rows,
+                                             int tile_cols,
+                                             float fps);
+
+#endif /* AVCODEC_AV1_PROFILE_LEVEL_H */
diff --git a/libavcodec/tests/.gitignore b/libavcodec/tests/.gitignore
index 2acfc4e804..5e0ccc5838 100644
--- a/libavcodec/tests/.gitignore
+++ b/libavcodec/tests/.gitignore
@@ -1,3 +1,4 @@
+/av1_levels
 /avcodec
 /avfft
 /avpacket
diff --git a/libavcodec/tests/av1_levels.c b/libavcodec/tests/av1_levels.c
new file mode 100644
index 0000000000..b308279b58
--- /dev/null
+++ b/libavcodec/tests/av1_levels.c
@@ -0,0 +1,125 @@
+/*
+ * Copyright (c) 2022 Fei Wang
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "libavutil/common.h"
+#include "libavutil/log.h"
+#include "libavcodec/av1_profile_level.h"
+
+static const struct {
+    int width;
+    int height;
+    float framerate;
+    int level_idx;
+} test_sizes[] = {
+    {  426,  240,  30.0,  0 },
+    {  640,  360,  30.0,  1 },
+    {  854,  480,  30.0,  4 },
+    { 1280,  720,  30.0,  5 },
+    { 1920, 1080,  30.0,  8 },
+    { 1920, 1080,  60.0,  9 },
+    { 3840, 2160,  30.0, 12 },
+    { 3840, 2160,  60.0, 13 },
+    { 3840, 2160, 120.0, 14 },
+    { 7680, 4320,  30.0, 16 },
+    { 7680, 4320,  60.0, 17 },
+    { 7680, 4320, 120.0, 18 },
+};
+
+static const struct {
+    int64_t bitrate;
+    int tier;
+    int level_idx;
+} test_bitrate[] = {
+    {   1500000, 0,  0 },
+    {   3000000, 0,  1 },
+    {   6000000, 0,  4 },
+    {  10000000, 0,  5 },
+    {  12000000, 0,  8 },
+    {  30000000, 1,  8 },
+    {  20000000, 0,  9 },
+    {  50000000, 1,  9 },
+    {  30000000, 0, 12 },
+    { 100000000, 1, 12 },
+    {  40000000, 0, 13 },
+    { 160000000, 1, 13 },
+    {  60000000, 0, 14 },
+    { 240000000, 1, 14 },
+    { 100000000, 0, 17 },
+    { 480000000, 1, 17 },
+    { 160000000, 0, 18 },
+    { 800000000, 1, 18 },
+};
+
+static const struct {
+    int tiles;
+    int tile_cols;
+    int level_idx;
+} test_tiles[] = {
+    {    8,  4,  0 },
+    {   16,  6,  4 },
+    {   32,  8,  8 },
+    {   64,  8, 12 },
+    {  128, 16, 16 },
+};
+
+int main(void)
+{
+    const AV1LevelDescriptor *level;
+    int i;
+
+#define CHECK(expected, format, ...) do { \
+        if (level ? (level->level_idx != expected) \
+                     : !level) { \
+            av_log(NULL, AV_LOG_ERROR, "Incorrect level for " \
+                   format ": expected %d, got %d.\n", __VA_ARGS__, \
+                   expected, level ? level->level_idx : -1); \
+            return 1; \
+        } \
+    } while (0)
+
+    for (i = 0; i < FF_ARRAY_ELEMS(test_sizes); i++) {
+        level = ff_av1_guess_level(0, 0,
+                                   test_sizes[i].width,
+                                   test_sizes[i].height,
+                                   0, 0, test_sizes[i].framerate);
+        CHECK(test_sizes[i].level_idx, "size %dx%d, framerate %f",
+              test_sizes[i].width, test_sizes[i].height, test_sizes[i].framerate);
+    }
+
+    for (i = 0; i < FF_ARRAY_ELEMS(test_bitrate); i++) {
+        level = ff_av1_guess_level(test_bitrate[i].bitrate,
+                                   test_bitrate[i].tier,
+                                   0, 0, 0, 0, 0);
+        CHECK(test_bitrate[i].level_idx, "bitrate %"PRId64" tier %d",
+              test_bitrate[i].bitrate, test_bitrate[i].tier);
+    }
+
+    for (i = 0; i < FF_ARRAY_ELEMS(test_tiles); i++) {
+        level = ff_av1_guess_level(0, 0, 0, 0,
+                                   test_tiles[i].tiles,
+                                   test_tiles[i].tile_cols,
+                                   0);
+        CHECK(test_tiles[i].level_idx, "tiles %d, tile cols %d",
+              test_tiles[i].tiles,
+              test_tiles[i].tile_cols);
+    }
+
+    return 0;
+}
diff --git a/tests/fate/libavcodec.mak b/tests/fate/libavcodec.mak
index 8f56fae3a8..95efa6ccda 100644
--- a/tests/fate/libavcodec.mak
+++ b/tests/fate/libavcodec.mak
@@ -66,6 +66,11 @@ fate-h265-levels: libavcodec/tests/h265_levels$(EXESUF)
 fate-h265-levels: CMD = run libavcodec/tests/h265_levels$(EXESUF)
 fate-h265-levels: REF = /dev/null
 
+FATE_LIBAVCODEC-$(CONFIG_AV1_VAAPI_ENCODER) += fate-av1-levels
+fate-av1-levels: libavcodec/tests/av1_levels$(EXESUF)
+fate-av1-levels: CMD = run libavcodec/tests/av1_levels$(EXESUF)
+fate-av1-levels: REF = /dev/null
+
 FATE_LIBAVCODEC-$(CONFIG_IIRFILTER) += fate-iirfilter
 fate-iirfilter: libavcodec/tests/iirfilter$(EXESUF)
 fate-iirfilter: CMD = run libavcodec/tests/iirfilter$(EXESUF)
-- 
2.34.1

