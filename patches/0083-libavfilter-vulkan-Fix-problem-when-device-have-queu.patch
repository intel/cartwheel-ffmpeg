From d47222994a6953d3fb7b1cb328123bc865ee53c4 Mon Sep 17 00:00:00 2001
From: Wenbin Chen <wenbin.chen@intel.com>
Date: Mon, 9 Aug 2021 13:51:31 +0800
Subject: [PATCH 01/13] libavfilter/vulkan: Fix problem when device have
 queue_count greater than 1

If the descriptorSetCount is greater than the number of setLayouts,
vkAllocateDescriptorSets will report error. Now fix it.

Now the following command can run on the device that has queue_count greater
than one:
ffmpeg -v verbose -init_hw_device vulkan=vul:0 -filter_hw_device vul
-i input1080p.264 -vf "hwupload=extra_hw_frames=16,scale_vulkan=1920:1080,
hwdownload,format=yuv420p" -f rawvideo output.yuv

Signed-off-by: Wenbin Chen <wenbin.chen@intel.com>
---
 libavfilter/vulkan.c | 18 ++++++++----------
 libavfilter/vulkan.h |  1 -
 2 files changed, 8 insertions(+), 11 deletions(-)

diff --git a/libavfilter/vulkan.c b/libavfilter/vulkan.c
index 337c8d7d5a..139a650363 100644
--- a/libavfilter/vulkan.c
+++ b/libavfilter/vulkan.c
@@ -1160,7 +1160,7 @@ void ff_vk_update_descriptor_set(AVFilterContext *avctx, VulkanPipeline *pl,
     VulkanFilterContext *s = avctx->priv;
 
     vkUpdateDescriptorSetWithTemplate(s->hwctx->act_dev,
-                                      pl->desc_set[s->cur_queue_idx * pl->desc_layout_num + set_id],
+                                      pl->desc_set[set_id],
                                       pl->desc_template[set_id],
                                       s);
 }
@@ -1179,14 +1179,12 @@ int ff_vk_init_pipeline_layout(AVFilterContext *avctx, VulkanPipeline *pl)
     VkResult ret;
     VulkanFilterContext *s = avctx->priv;
 
-    pl->descriptor_sets_num = pl->desc_layout_num * s->queue_count;
-
     { /* Init descriptor set pool */
         VkDescriptorPoolCreateInfo pool_create_info = {
             .sType         = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
             .poolSizeCount = pl->pool_size_desc_num,
             .pPoolSizes    = pl->pool_size_desc,
-            .maxSets       = pl->descriptor_sets_num,
+            .maxSets       = pl->desc_layout_num,
         };
 
         ret = vkCreateDescriptorPool(s->hwctx->act_dev, &pool_create_info,
@@ -1203,11 +1201,11 @@ int ff_vk_init_pipeline_layout(AVFilterContext *avctx, VulkanPipeline *pl)
         VkDescriptorSetAllocateInfo alloc_info = {
             .sType              = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
             .descriptorPool     = pl->desc_pool,
-            .descriptorSetCount = pl->descriptor_sets_num,
+            .descriptorSetCount = pl->desc_layout_num,
             .pSetLayouts        = pl->desc_layout,
         };
 
-        pl->desc_set = av_malloc(pl->descriptor_sets_num*sizeof(*pl->desc_set));
+        pl->desc_set = av_malloc(pl->desc_layout_num*sizeof(*pl->desc_set));
         if (!pl->desc_set)
             return AVERROR(ENOMEM);
 
@@ -1243,12 +1241,12 @@ int ff_vk_init_pipeline_layout(AVFilterContext *avctx, VulkanPipeline *pl)
     { /* Descriptor template (for tightly packed descriptors) */
         VkDescriptorUpdateTemplateCreateInfo *desc_template_info;
 
-        pl->desc_template = av_malloc(pl->descriptor_sets_num*sizeof(*pl->desc_template));
+        pl->desc_template = av_malloc(pl->desc_layout_num*sizeof(*pl->desc_template));
         if (!pl->desc_template)
             return AVERROR(ENOMEM);
 
         /* Create update templates for the descriptor sets */
-        for (int i = 0; i < pl->descriptor_sets_num; i++) {
+        for (int i = 0; i < pl->desc_layout_num; i++) {
             desc_template_info = &pl->desc_template_info[i % pl->desc_layout_num];
             desc_template_info->pipelineLayout = pl->pipeline_layout;
             ret = vkCreateDescriptorUpdateTemplate(s->hwctx->act_dev,
@@ -1318,7 +1316,7 @@ void ff_vk_bind_pipeline_exec(AVFilterContext *avctx, FFVkExecContext *e,
     vkCmdBindPipeline(e->bufs[s->cur_queue_idx], pl->bind_point, pl->pipeline);
 
     vkCmdBindDescriptorSets(e->bufs[s->cur_queue_idx], pl->bind_point,
-                            pl->pipeline_layout, 0, pl->descriptor_sets_num,
+                            pl->pipeline_layout, 0, pl->desc_layout_num,
                             pl->desc_set, 0, 0);
 
     e->bound_pl = pl;
@@ -1401,7 +1399,7 @@ static void free_pipeline(VulkanFilterContext *s, VulkanPipeline *pl)
     /* Only freed in case of failure */
     av_freep(&pl->pool_size_desc);
     if (pl->desc_template_info) {
-        for (int i = 0; i < pl->descriptor_sets_num; i++)
+        for (int i = 0; i < pl->desc_layout_num; i++)
             av_free((void *)pl->desc_template_info[i].pDescriptorUpdateEntries);
         av_freep(&pl->desc_template_info);
     }
diff --git a/libavfilter/vulkan.h b/libavfilter/vulkan.h
index f9a4dc5839..dcc4d1b37b 100644
--- a/libavfilter/vulkan.h
+++ b/libavfilter/vulkan.h
@@ -110,7 +110,6 @@ typedef struct VulkanPipeline {
     VkDescriptorSet            *desc_set;
     VkDescriptorUpdateTemplate *desc_template;
     int                         desc_layout_num;
-    int                         descriptor_sets_num;
     int                         pool_size_desc_num;
 
     /* Temporary, used to store data in between initialization stages */
-- 
2.25.1

