From f0457230085575efa4751365b4e5fc29d5cc72bf Mon Sep 17 00:00:00 2001
From: Fei Wang <fei.w.wang@intel.com>
Date: Wed, 25 Nov 2020 13:48:35 -0500
Subject: [PATCH 43/68] lavc/vaapi_encode_h265: set low delay B automatically

When encode P frame, query driver if it support P. If not, convert
P frame to forward prediction B.

Signed-off-by: Fei Wang <fei.w.wang@intel.com>
---
 libavcodec/vaapi_encode.c      | 11 ++++++++---
 libavcodec/vaapi_encode_h265.c | 23 +++++------------------
 2 files changed, 13 insertions(+), 21 deletions(-)

diff --git a/libavcodec/vaapi_encode.c b/libavcodec/vaapi_encode.c
index 0340cca61d..e45be71201 100644
--- a/libavcodec/vaapi_encode.c
+++ b/libavcodec/vaapi_encode.c
@@ -1962,7 +1962,7 @@ static av_cold int vaapi_encode_init_gop_structure(AVCodecContext *avctx)
 
 #if VA_CHECK_VERSION(1, 9, 0)
     if (!(ctx->codec->flags & FLAG_INTRA_ONLY ||
-        avctx->gop_size <= 1)) {
+        avctx->gop_size <= 1 || !ctx->b_frame_strategy)) {
         attr = (VAConfigAttrib) { VAConfigAttribPredictionDirection };
         vas = vaGetConfigAttributes(ctx->hwctx->display,
                                     ctx->va_profile,
@@ -1992,6 +1992,11 @@ static av_cold int vaapi_encode_init_gop_structure(AVCodecContext *avctx)
             }
 
             if (attr.value & VA_PREDICTION_DIRECTION_BI_NOT_EMPTY) {
+                if (attr.value & VA_PREDICTION_DIRECTION_FUTURE)
+                    ctx->b_frame_strategy = 2;
+                else
+                    ctx->b_frame_strategy = 1;
+
                 if (ref_l0 > 0 && ref_l1 > 0) {
                     ctx->p_to_gpb = 1;
                     av_log(avctx, AV_LOG_VERBOSE, "Driver does not support P-frames, "
@@ -2013,7 +2018,7 @@ static av_cold int vaapi_encode_init_gop_structure(AVCodecContext *avctx)
     } else if (!(ctx->codec->flags & FLAG_B_PICTURES) ||
                ref_l1 < 1 || avctx->max_b_frames < 1 ||
                prediction_pre_only || ctx->b_frame_strategy == 1) {
-        if (ctx->b_frame_strategy == 1)
+        if (ctx->b_frame_strategy)
             av_log(avctx, AV_LOG_VERBOSE, "Using intra and low delay "
                    "B-frames (supported references: %d / %d).\n",
                    ref_l0, ref_l1);
@@ -2028,7 +2033,7 @@ static av_cold int vaapi_encode_init_gop_structure(AVCodecContext *avctx)
         ctx->p_per_i  = INT_MAX;
         ctx->b_per_p  = 0;
     } else {
-       if (ctx->b_frame_strategy == 2)
+       if (ctx->b_frame_strategy)
            av_log(avctx, AV_LOG_VERBOSE, "Using intra, reference B- and "
                    "B-frames (supported references: %d / %d).\n",
                    ref_l0, ref_l1);
diff --git a/libavcodec/vaapi_encode_h265.c b/libavcodec/vaapi_encode_h265.c
index edf62c3856..ce766fa2a1 100644
--- a/libavcodec/vaapi_encode_h265.c
+++ b/libavcodec/vaapi_encode_h265.c
@@ -1009,7 +1009,7 @@ static int vaapi_encode_h265_init_slice_params(AVCodecContext *avctx,
 
     // driver requires low delay B frame in low power mode
     if (sh->slice_type == HEVC_SLICE_P &&
-        (ctx->p_to_gpb || priv->b_frame_strategy))
+        (ctx->p_to_gpb || ctx->b_frame_strategy))
         sh->slice_type = HEVC_SLICE_B;
 
     sh->slice_pic_order_cnt_lsb = hpic->pic_order_cnt &
@@ -1181,7 +1181,7 @@ static int vaapi_encode_h265_init_slice_params(AVCodecContext *avctx,
         av_assert0(pic->type == PICTURE_TYPE_P ||
                    pic->type == PICTURE_TYPE_B);
         vslice->ref_pic_list0[0] = vpic->reference_frames[0];
-        if ((ctx->p_to_gpb || priv->b_frame_strategy) &&
+        if ((ctx->p_to_gpb || ctx->b_frame_strategy) &&
             pic->type == PICTURE_TYPE_P)
             // Reference for GPB B-frame, L0 == L1
             vslice->ref_pic_list1[0] = vpic->reference_frames[0];
@@ -1194,7 +1194,7 @@ static int vaapi_encode_h265_init_slice_params(AVCodecContext *avctx,
 
     // Driver requires low delay B frame and matched ref_pic_list0/1[]
     // for low power mode
-    if (pic->type == PICTURE_TYPE_P && (ctx->p_to_gpb || ctx->low_power)) {
+    if (pic->type == PICTURE_TYPE_P && (ctx->p_to_gpb || ctx->b_frame_strategy)) {
         vslice->slice_type = HEVC_SLICE_B;
         for (i = 0; i < FF_ARRAY_ELEMS(vslice->ref_pic_list0); i++) {
             vslice->ref_pic_list1[i].picture_id = vslice->ref_pic_list0[i].picture_id;
@@ -1395,20 +1395,7 @@ static av_cold int vaapi_encode_h265_init(AVCodecContext *avctx)
     if (priv->qp > 0)
         ctx->explicit_qp = priv->qp;
 
-    // Low delay B-frames is required for low power encoding.
-    if (ctx->low_power && priv->b_frame_strategy != 1) {
-        priv->b_frame_strategy = 1;
-        av_log(avctx, AV_LOG_WARNING, "Low delay B-frames required "
-               "for low power encoding.\n");
-    }
-
-    if (priv->b_frame_strategy) {
-        ctx->b_frame_strategy = priv->b_frame_strategy;
-        if (ctx->b_frame_strategy == 1)
-            av_log(avctx, AV_LOG_VERBOSE, "Low delay B-frames enabled.\n");
-        else
-            av_log(avctx, AV_LOG_VERBOSE, "Reference B-frames enabled.\n");
-    }
+    ctx->b_frame_strategy = priv->b_frame_strategy;
 
     return ff_vaapi_encode_init(avctx);
 }
@@ -1488,7 +1475,7 @@ static const AVOption vaapi_encode_h265_options[] = {
       INT_MIN, INT_MAX, FLAGS, "sei" },
     { "b_strategy", "Strategy to choose between I/P/B-frames",
       OFFSET(b_frame_strategy), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, 2, FLAGS, "b_strategy" },
-        { "normal",      "Normal IB..BPB..B strategy",
+        { "auto",         "Convert P/B to forward-prediction B automatically if driver doesn't support.",
                           0, AV_OPT_TYPE_CONST, { .i64 = 0 }, INT_MIN, INT_MAX, FLAGS, "b_strategy" },
         { "low_delay_b", "Use low delay B-frames with forward-prediction only",
                           0, AV_OPT_TYPE_CONST, { .i64 = 1 }, INT_MIN, INT_MAX, FLAGS, "b_strategy" },
-- 
2.32.0

