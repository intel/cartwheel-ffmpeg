From 51b1b3b5661793765106ec77ad5e6a56417fa178 Mon Sep 17 00:00:00 2001
From: Linjie Fu <linjie.fu@intel.com>
Date: Mon, 18 May 2020 16:54:57 +0800
Subject: [PATCH 05/70] lavcu/qsv: Add decoding support for 444 8/10 bit

Add support for 0yuv/y410 in system memory

Signed-off-by: Linjie Fu <linjie.fu@intel.com>
Signed-off-by: Haihao Xiang <haihao.xiang@intel.com>
---
 libavcodec/qsv.c          | 22 ++++++++++++++++++++++
 libavcodec/qsvdec.c       |  4 ++++
 libavutil/hwcontext_qsv.c | 13 +++++++++++++
 3 files changed, 39 insertions(+)

diff --git a/libavcodec/qsv.c b/libavcodec/qsv.c
index 385b43bb6c..8107a14217 100644
--- a/libavcodec/qsv.c
+++ b/libavcodec/qsv.c
@@ -185,7 +185,9 @@ enum AVPixelFormat ff_qsv_map_fourcc(uint32_t fourcc)
     case MFX_FOURCC_RGB4: return AV_PIX_FMT_BGRA;
 #if CONFIG_VAAPI
     case MFX_FOURCC_YUY2: return AV_PIX_FMT_YUYV422;
+    case MFX_FOURCC_AYUV: return AV_PIX_FMT_0YUV;
     case MFX_FOURCC_Y210: return AV_PIX_FMT_Y210;
+    case MFX_FOURCC_Y410: return AV_PIX_FMT_Y410;
 #endif
     }
     return AV_PIX_FMT_NONE;
@@ -214,10 +216,18 @@ int ff_qsv_map_pixfmt(enum AVPixelFormat format, uint32_t *fourcc)
     case AV_PIX_FMT_YUYV422:
         *fourcc = MFX_FOURCC_YUY2;
         return AV_PIX_FMT_YUYV422;
+    case AV_PIX_FMT_0YUV:
+    case AV_PIX_FMT_YUV444P:
+        *fourcc = MFX_FOURCC_AYUV;
+        return AV_PIX_FMT_0YUV;
     case AV_PIX_FMT_YUV422P10:
     case AV_PIX_FMT_Y210:
         *fourcc = MFX_FOURCC_Y210;
         return AV_PIX_FMT_Y210;
+    case AV_PIX_FMT_Y410:
+    case AV_PIX_FMT_YUV444P10:
+        *fourcc = MFX_FOURCC_Y410;
+        return AV_PIX_FMT_Y410;
 #endif
     default:
         return AVERROR(ENOSYS);
@@ -252,6 +262,18 @@ int ff_qsv_map_frame_to_surface(const AVFrame *frame, mfxFrameSurface1 *surface)
         surface->Data.U16 = (mfxU16 *)frame->data[0] + 1;
         surface->Data.V16 = (mfxU16 *)frame->data[0] + 3;
         break;
+
+    case AV_PIX_FMT_0YUV:
+        surface->Data.V = frame->data[0];
+        surface->Data.U = frame->data[0] + 1;
+        surface->Data.Y = frame->data[0] + 2;
+        surface->Data.A = frame->data[0] + 3;
+        break;
+
+    case AV_PIX_FMT_Y410:
+        surface->Data.U = frame->data[0];
+        break;
+
     default:
         return AVERROR(ENOSYS);
     }
diff --git a/libavcodec/qsvdec.c b/libavcodec/qsvdec.c
index 5fc5bed4c8..c4f381ca69 100644
--- a/libavcodec/qsvdec.c
+++ b/libavcodec/qsvdec.c
@@ -135,6 +135,8 @@ static int qsv_get_continuous_buffer(AVCodecContext *avctx, AVFrame *frame,
         frame->linesize[0] = 2 * FFALIGN(avctx->width, 128);
         break;
     case AV_PIX_FMT_Y210:
+    case AV_PIX_FMT_Y410:
+    case AV_PIX_FMT_0YUV:
         frame->linesize[0] = 4 * FFALIGN(avctx->width, 128);
         break;
     default:
@@ -1021,6 +1023,8 @@ const FFCodec ff_##x##_qsv_decoder = { \
                                                     AV_PIX_FMT_P010, \
                                                     AV_PIX_FMT_YUYV422, \
                                                     AV_PIX_FMT_Y210, \
+                                                    AV_PIX_FMT_0YUV, \
+                                                    AV_PIX_FMT_Y410, \
                                                     AV_PIX_FMT_QSV, \
                                                     AV_PIX_FMT_NONE }, \
     .hw_configs     = qsv_hw_configs, \
diff --git a/libavutil/hwcontext_qsv.c b/libavutil/hwcontext_qsv.c
index 82cbe2e124..e5edde3bda 100644
--- a/libavutil/hwcontext_qsv.c
+++ b/libavutil/hwcontext_qsv.c
@@ -106,8 +106,12 @@ static const struct {
 #if CONFIG_VAAPI
     { AV_PIX_FMT_YUYV422,
                        MFX_FOURCC_YUY2 },
+    { AV_PIX_FMT_0YUV,
+                       MFX_FOURCC_AYUV },
     { AV_PIX_FMT_Y210,
                        MFX_FOURCC_Y210 },
+    { AV_PIX_FMT_Y410,
+                       MFX_FOURCC_Y410 },
 #endif
 };
 
@@ -1022,6 +1026,15 @@ static int map_frame_to_surface(const AVFrame *frame, mfxFrameSurface1 *surface)
         surface->Data.U16 = (mfxU16 *)frame->data[0] + 1;
         surface->Data.V16 = (mfxU16 *)frame->data[0] + 3;
         break;
+    case AV_PIX_FMT_0YUV:
+        surface->Data.V = frame->data[0];
+        surface->Data.U = frame->data[0] + 1;
+        surface->Data.Y = frame->data[0] + 2;
+        surface->Data.A = frame->data[0] + 3;
+        break;
+    case AV_PIX_FMT_Y410:
+        surface->Data.U = frame->data[0];
+        break;
 #endif
     default:
         return MFX_ERR_UNSUPPORTED;
-- 
2.17.1

