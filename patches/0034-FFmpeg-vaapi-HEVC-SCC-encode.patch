From c0ce9dea1d1515f2ac918687109c6a6dbe2fb0c8 Mon Sep 17 00:00:00 2001
From: Fei Wang <fei.w.wang@intel.com>
Date: Sun, 18 Oct 2020 16:15:37 -0400
Subject: [PATCH] FFmpeg vaapi HEVC SCC encode.

Depend on 0008 hevc low power enable patch.

Main:
ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -v verbose -f rawvideo -pix_fmt yuv420p -s:v 320x240 -r:v 30 -i 320x240_100.i420 -vf 'format=nv12,hwupload' -c:v hevc_vaapi -profile:v main -rc_mode CQP -g 30 -slices 1 -bf 3  -low_power 1 -vframes 150 -y out.h265

Main10:
ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -v verbose -f rawvideo -pix_fmt p010 -s:v 320x240 -r:v 30 -i 320x240_100.p010 -vf 'format=p010,hwupload' -c:v hevc_vaapi -profile:v scc -rc_mode CQP -g 30 -slices 1 -bf 3  -low_power 1 -vframes 150 -y out.h265

Main 444:
ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -v verbose -f rawvideo -pix_fmt vuyx -s:v 320x240 -r:v 30 -i 320x240_100.ayuv -vf 'format=vuyx,hwupload' -c:v hevc_vaapi -profile:v scc -rc_mode CQP -g 30 -slices 1 -bf 3  -low_power 1 -vframes 150 -y out.h265

Main 444-10:
ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -v verbose -f rawvideo -pix_fmt y410 -s:v 320x240 -r:v 30 -i 320x240_100.y410 -vf 'format=y410,hwupload' -c:v hevc_vaapi -profile:v scc -rc_mode CQP -g 30 -slices 1 -bf 3  -low_power 1 -vframes 150 -y out.h265

Signed-off-by: Fei Wang <fei.w.wang@intel.com>
---
 libavcodec/vaapi_encode_h265.c | 47 +++++++++++++++++++++++++++++++---
 1 file changed, 43 insertions(+), 4 deletions(-)

diff --git a/libavcodec/vaapi_encode_h265.c b/libavcodec/vaapi_encode_h265.c
index aa7e532f9a..08c7f431f9 100644
--- a/libavcodec/vaapi_encode_h265.c
+++ b/libavcodec/vaapi_encode_h265.c
@@ -341,8 +341,9 @@ static int vaapi_encode_h265_init_sequence_params(AVCodecContext *avctx)
     ptl->general_max_420chroma_constraint_flag  = chroma_format <= 1;
     ptl->general_max_monochrome_constraint_flag = chroma_format == 0;
 
-    ptl->general_intra_constraint_flag = ctx->gop_size == 1;
     ptl->general_one_picture_only_constraint_flag = 0;
+    ptl->general_intra_constraint_flag =
+        (avctx->profile == FF_PROFILE_HEVC_SCC) ? 0 : ctx->gop_size == 1;
 
     ptl->general_lower_bit_rate_constraint_flag = 1;
 
@@ -563,6 +564,14 @@ static int vaapi_encode_h265_init_sequence_params(AVCodecContext *avctx)
     vui->log2_max_mv_length_horizontal = 15;
     vui->log2_max_mv_length_vertical   = 15;
 
+    if (avctx->profile == FF_PROFILE_HEVC_SCC) {
+        sps->sps_extension_present_flag = 1;
+        sps->sps_scc_extension_flag = 1;
+        sps->sps_curr_pic_ref_enabled_flag = 1;
+        sps->palette_mode_enabled_flag = 1;
+        sps->palette_max_size = 64;
+        sps->delta_palette_max_predictor_size = 32;
+    }
 
     // PPS
 
@@ -636,6 +645,12 @@ static int vaapi_encode_h265_init_sequence_params(AVCodecContext *avctx)
 
     pps->pps_loop_filter_across_slices_enabled_flag = 1;
 
+    if (avctx->profile == FF_PROFILE_HEVC_SCC) {
+        pps->pps_extension_present_flag = 1;
+        pps->pps_scc_extension_flag =1;
+        pps->pps_curr_pic_ref_enabled_flag = 1;
+    }
+
     // Fill VAAPI parameter buffers.
 
     *vseq = (VAEncSequenceParameterBufferHEVC) {
@@ -691,6 +706,11 @@ static int vaapi_encode_h265_init_sequence_params(AVCodecContext *avctx)
             sps->log2_diff_max_min_pcm_luma_coding_block_size,
 
         .vui_parameters_present_flag = 0,
+
+        .scc_fields.bits = {
+            .palette_mode_enabled_flag = sps->palette_mode_enabled_flag,
+        }
+
     };
 
     *vpic = (VAEncPictureParameterBufferHEVC) {
@@ -743,6 +763,10 @@ static int vaapi_encode_h265_init_sequence_params(AVCodecContext *avctx)
             .enable_gpu_weighted_prediction = 0,
             .no_output_of_prior_pics_flag   = 0,
         },
+
+        .scc_fields.bits = {
+            .pps_curr_pic_ref_enabled_flag = pps->pps_curr_pic_ref_enabled_flag,
+        }
     };
 
     if (pps->tiles_enabled_flag) {
@@ -1090,8 +1114,14 @@ static int vaapi_encode_h265_init_slice_params(AVCodecContext *avctx,
             sh->collocated_ref_idx      = 0;
         }
 
-        sh->num_ref_idx_active_override_flag = 0;
-        sh->num_ref_idx_l0_active_minus1 = pps->num_ref_idx_l0_default_active_minus1;
+
+        if (avctx->profile == FF_PROFILE_HEVC_SCC) {
+            sh->num_ref_idx_active_override_flag = 1;
+            sh->num_ref_idx_l0_active_minus1 = pps->num_ref_idx_l0_default_active_minus1 + 1;
+        } else {
+            sh->num_ref_idx_active_override_flag = 0;
+            sh->num_ref_idx_l0_active_minus1 = pps->num_ref_idx_l0_default_active_minus1;
+        }
         sh->num_ref_idx_l1_active_minus1 = pps->num_ref_idx_l1_default_active_minus1;
     }
 
@@ -1113,7 +1143,9 @@ static int vaapi_encode_h265_init_slice_params(AVCodecContext *avctx,
         .slice_type                 = sh->slice_type,
         .slice_pic_parameter_set_id = sh->slice_pic_parameter_set_id,
 
-        .num_ref_idx_l0_active_minus1 = sh->num_ref_idx_l0_active_minus1,
+        .num_ref_idx_l0_active_minus1 = sh->num_ref_idx_active_override_flag ?
+                                        sh->num_ref_idx_l0_active_minus1 - 1 :
+                                        sh->num_ref_idx_l0_active_minus1,
         .num_ref_idx_l1_active_minus1 = sh->num_ref_idx_l1_active_minus1,
 
         .luma_log2_weight_denom         = sh->luma_log2_weight_denom,
@@ -1304,6 +1336,12 @@ static const VAAPIEncodeProfile vaapi_encode_h265_profiles[] = {
     { FF_PROFILE_HEVC_REXT,     8, 3, 0, 0, VAProfileHEVCMain444 },
     { FF_PROFILE_HEVC_REXT,    10, 3, 0, 0, VAProfileHEVCMain444_10 },
     { FF_PROFILE_HEVC_REXT,    12, 3, 0, 0, VAProfileHEVCMain444_12 },
+    { FF_PROFILE_HEVC_SCC,      8, 3, 1, 1, VAProfileHEVCSccMain    },
+    { FF_PROFILE_HEVC_SCC,     10, 3, 1, 1, VAProfileHEVCSccMain10  },
+    { FF_PROFILE_HEVC_SCC,      8, 3, 0, 0, VAProfileHEVCSccMain444 },
+#endif
+#if VA_CHECK_VERSION(1, 9, 0)
+    { FF_PROFILE_HEVC_SCC,     10, 3, 0, 0, VAProfileHEVCSccMain444_10 },
 #endif
     { FF_PROFILE_UNKNOWN }
 };
@@ -1402,6 +1440,7 @@ static const AVOption vaapi_encode_h265_options[] = {
     { PROFILE("main",               FF_PROFILE_HEVC_MAIN) },
     { PROFILE("main10",             FF_PROFILE_HEVC_MAIN_10) },
     { PROFILE("rext",               FF_PROFILE_HEVC_REXT) },
+    { PROFILE("scc",                FF_PROFILE_HEVC_SCC) },
 #undef PROFILE
 
     { "tier", "Set tier (general_tier_flag)",
-- 
2.25.1

